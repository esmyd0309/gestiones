{"version":3,"sources":["../../src/ts/utils/csv.ts"],"names":[],"mappings":"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","file":"csv.js","sourcesContent":["export class CsvUtils {\n    // Based on https://stackoverflow.com/a/14991797\n    // This will parse a delimited string into an array of arrays.\n    static stringToArray(strData: string, delimiter = ','): string[][] {\n        const data: any[][] = [];\n        const isNewline = (char: string) => char === '\\r' || char === '\\n';\n\n        let insideQuotedField = false;\n\n        // iterate over each character, keep track of current row and column (of the returned array)\n        for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n            const previousChar = strData[position - 1];\n            const currentChar = strData[position];\n            const nextChar = strData[position + 1];\n            const ensureDataExists = () => {\n                if (!data[row]) {\n                    // create row if it doesn't exist\n                    data[row] = [];\n                }\n\n                if (!data[row][column]) {\n                    // create column if it doesn't exist\n                    data[row][column] = '';\n                }\n            };\n\n            ensureDataExists();\n\n            if (currentChar === '\"') {\n                if (insideQuotedField) {\n                    if (nextChar === '\"') {\n                        // unescape double quote\n                        data[row][column] += '\"';\n                        position++;\n                    } else {\n                        // exit quoted field\n                        insideQuotedField = false;\n                    }\n\n                    continue;\n                } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                    // enter quoted field\n                    insideQuotedField = true;\n                    continue;\n                }\n            }\n\n            if (!insideQuotedField) {\n                if (currentChar === delimiter) {\n                    // move to next column\n                    column++;\n                    ensureDataExists();\n\n                    continue;\n                } else if (isNewline(currentChar)) {\n                    // move to next row\n                    column = 0;\n                    row++;\n                    ensureDataExists();\n\n                    if (currentChar === '\\r' && nextChar === '\\n') {\n                        // skip over second newline character if it exists\n                        position++;\n                    }\n\n                    continue;\n                }\n            }\n\n            // add current character to current column\n            data[row][column] += currentChar;\n        }\n\n        return data;\n    }\n}\n"]}