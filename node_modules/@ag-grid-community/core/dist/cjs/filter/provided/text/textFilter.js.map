{"version":3,"sources":["../../src/ts/filter/provided/text/textFilter.ts"],"names":[],"mappings":"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","file":"textFilter.js","sourcesContent":["import { IDoesFilterPassParams } from \"../../../interfaces/iFilter\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { _ } from \"../../../utils\";\nimport {\n    SimpleFilter,\n    ConditionPosition,\n    ISimpleFilterParams,\n    ISimpleFilterModel\n} from \"../simpleFilter\";\nimport { AgInputTextField } from \"../../../widgets/agInputTextField\";\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    filter?: string;\n}\n\nexport interface TextComparator {\n    (filter: string, gridValue: any, filterText: string): boolean;\n}\n\nexport interface TextFormatter {\n    (from: string): string;\n}\n\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    textCustomComparator?: TextComparator;\n    caseSensitive?: boolean;\n    textFormatter?: (from: string) => string;\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel> {\n\n    private static readonly FILTER_TYPE = 'text';\n\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => {\n        return from;\n    }\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => {\n        if (from == null) { return null; }\n        return from.toString().toLowerCase();\n    }\n\n    static DEFAULT_COMPARATOR: TextComparator = (filter: string, value: any, filterText: string) => {\n        switch (filter) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) === -1;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                // should never happen\n                console.warn('invalid filter type ' + filter);\n                return false;\n        }\n    }\n\n    @RefSelector('eValue1') private eValue1: AgInputTextField;\n    @RefSelector('eValue2') private eValue2: AgInputTextField;\n\n    private comparator: TextComparator;\n    private formatter: TextFormatter;\n\n    private textFilterParams: ITextFilterParams;\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    private getValue(inputField: AgInputTextField): string {\n        let val = inputField.getValue();\n\n        val = _.makeNull(val);\n\n        if (val && val.trim() === '') {\n            val = null;\n        }\n\n        return val;\n    }\n\n    private addValueChangedListeners(): void {\n        const listener = () => this.onUiChanged();\n        this.eValue1.onValueChange(listener);\n        this.eValue2.onValueChange(listener);\n    }\n\n    protected setParams(params: ITextFilterParams): void {\n        super.setParams(params);\n\n        this.textFilterParams = params;\n        this.comparator = this.textFilterParams.textCustomComparator ? this.textFilterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;\n        this.formatter = this.textFilterParams.textFormatter\n                            ? this.textFilterParams.textFormatter\n                            : (this.textFilterParams.caseSensitive == true\n                                ? TextFilter.DEFAULT_FORMATTER\n                                : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n\n        this.addValueChangedListeners();\n    }\n\n    protected setConditionIntoUi(model: TextFilterModel, position: ConditionPosition): void {\n        const positionOne = position === ConditionPosition.One;\n        const eValue = positionOne ? this.eValue1 : this.eValue2;\n\n        eValue.setValue(model ? model.filter : null);\n    }\n\n    protected createCondition(position: ConditionPosition): TextFilterModel {\n        const positionOne = position === ConditionPosition.One;\n        const type = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n        const eValue = positionOne ? this.eValue1 : this.eValue2;\n        const value = this.getValue(eValue);\n        const model: TextFilterModel =  {\n            filterType: TextFilter.FILTER_TYPE,\n            type: type\n        };\n\n        if (!this.doesFilterHaveHiddenInput(type)) {\n            model.filter = value;\n        }\n        return model;\n    }\n\n    protected getFilterType(): string {\n        return TextFilter.FILTER_TYPE;\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter && aSimple.type === bSimple.type;\n    }\n\n    protected resetUiToDefaults(silent?: boolean): void {\n        super.resetUiToDefaults(silent);\n\n        const fields = [this.eValue1, this.eValue2];\n\n        fields.forEach(field => field.setValue(null, silent));\n        this.resetPlaceholder();\n    }\n\n    private resetPlaceholder(): void {\n        const translate = this.translate.bind(this);\n        const placeholder = translate('filterOoo', 'Filter...');\n\n        const fields = [this.eValue1, this.eValue2];\n\n        fields.forEach(field => field.setInputPlaceholder(placeholder));\n    }\n\n    protected setValueFromFloatingFilter(value: string): void {\n        this.eValue1.setValue(value);\n        this.eValue2.setValue(null);\n    }\n\n    public getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return `<div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                    <ag-input-text-field class=\"ag-filter-filter\" ref=\"eValue${pos}\"></ag-input-text-field>\n            </div>`;\n    }\n\n    protected updateUiVisibility(): void {\n        super.updateUiVisibility();\n\n        const showValue1 = this.showValueFrom(this.getCondition1Type());\n        _.setDisplayed(this.eValue1.getGui(), showValue1);\n\n        const showValue2 = this.showValueFrom(this.getCondition2Type());\n        _.setDisplayed(this.eValue2.getGui(), showValue2);\n    }\n\n    public afterGuiAttached() {\n        this.resetPlaceholder();\n        this.eValue1.getInputElement().focus();\n    }\n\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        const positionOne = position === ConditionPosition.One;\n        const option = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n        const eFilterValue = positionOne ? this.eValue1 : this.eValue2;\n\n        if (option === SimpleFilter.EMPTY) { return false; }\n\n        const value = this.getValue(eFilterValue);\n\n        if (this.doesFilterHaveHiddenInput(option)) {\n            return true;\n        }\n\n        return value != null;\n    }\n\n    public individualConditionPasses(params: IDoesFilterPassParams, filterModel: TextFilterModel): boolean {\n        const filterText:string =  filterModel.filter;\n        const filterOption:string = filterModel.type;\n        const cellValue = this.textFilterParams.valueGetter(params.node);\n        const cellValueFormatted = this.formatter(cellValue);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterOption);\n\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterText != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterText, cellValueFormatted);\n            }\n        }\n\n        if (cellValue == null) {\n            return filterOption === SimpleFilter.NOT_EQUAL || filterOption === SimpleFilter.NOT_CONTAINS;\n        }\n\n        const filterTextFormatted: string = this.formatter(filterText);\n\n        return this.comparator(filterOption, cellValueFormatted, filterTextFormatted);\n    }\n\n}"]}